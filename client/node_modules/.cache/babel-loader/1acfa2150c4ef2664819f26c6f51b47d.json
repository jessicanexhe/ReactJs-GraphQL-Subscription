{"ast":null,"code":"var _jsxFileName = \"/home/burhan/public_html/react-graphql/MinimalGQLSubscriptions/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http'; // The http link is a terminating link that fetches GraphQL results from a GraphQL \n// endpoint over an http connection\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n}); // Allow you to send/receive subscriptions over a web socket\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:4000/',\n  options: {\n    reconnect: true\n  }\n}); // Acts as \"middleware\" for directing our operations over http or via web sockets\n\nconst terminatingLink = split(({\n  query: {\n    definitions\n  }\n}) => definitions.some(node => {\n  const kind = node.kind,\n        operation = node.operation;\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}), wsLink, httpLink); // Create a new client to make requests with, use the appropriate link returned \n// by termintating link (either ws or http)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: terminatingLink\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/burhan/public_html/react-graphql/MinimalGQLSubscriptions/client/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","InMemoryCache","split","WebSocketLink","HttpLink","httpLink","uri","wsLink","options","reconnect","terminatingLink","query","definitions","some","node","kind","operation","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAGA;AACA;;AACA,MAAMC,QAAQ,GAAG,IAAID,QAAJ,CAAa;AAC1BE,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,aAAJ,CAAkB;AAC7BG,EAAAA,GAAG,EAAE,sBADwB;AAE7BE,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AAFoB,CAAlB,CAAf,C,CAOA;;AACA,MAAMC,eAAe,GAAGR,KAAK,CACzB,CAAC;AAAES,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAD,KACIA,WAAW,CAACC,IAAZ,CAAiBC,IAAI,IAAI;AAAA,QACbC,IADa,GACOD,IADP,CACbC,IADa;AAAA,QACPC,SADO,GACOF,IADP,CACPE,SADO;AAErB,SAAOD,IAAI,KAAK,qBAAT,IAAkCC,SAAS,KAAK,cAAvD;AACH,CAHD,CAFqB,EAMzBT,MANyB,EAOzBF,QAPyB,CAA7B,C,CASA;AACA;;AACA,MAAMY,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC5BmB,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,EADqB;AAE5BkB,EAAAA,IAAI,EAAET;AAFsB,CAAjB,CAAf;AAKAb,QAAQ,CAACuB,MAAT,CAAgB,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACZ,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADY,CAAhB,EAGMI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHN","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from \"@apollo/react-hooks\"\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http';\n\n\n// The http link is a terminating link that fetches GraphQL results from a GraphQL \n// endpoint over an http connection\nconst httpLink = new HttpLink({\n    uri: 'http://localhost:4000/'\n});\n\n// Allow you to send/receive subscriptions over a web socket\nconst wsLink = new WebSocketLink({\n    uri: 'ws://localhost:4000/',\n    options: {\n        reconnect: true\n    }\n});\n\n// Acts as \"middleware\" for directing our operations over http or via web sockets\nconst terminatingLink = split(\n    ({ query: { definitions } }) =>\n        definitions.some(node => {\n            const { kind, operation } = node;\n            return kind === 'OperationDefinition' && operation === 'subscription';\n        }),\n    wsLink,\n    httpLink\n);\n// Create a new client to make requests with, use the appropriate link returned \n// by termintating link (either ws or http)\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: terminatingLink\n});\n\nReactDOM.render(<ApolloProvider client={client}>\n    <App />\n</ApolloProvider>\n    , document.getElementById('root'));\n\n"]},"metadata":{},"sourceType":"module"}