{"ast":null,"code":"import _slicedToArray from \"/home/burhan/public_html/react-graphql/MinimalGQLSubscriptions/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/burhan/public_html/react-graphql/MinimalGQLSubscriptions/client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport ToDoList from \"./ToDoList\";\nimport { Container, Input } from \"@material-ui/core\"; // Get all To Dos\n\nconst TODO_QUERY = gql`\nquery{\n\ttoDos{\n    id\n    title\n  }\n}`; // Create a To do\n\nconst TODO_MUTATION = gql`\n  mutation CreateToDo($title:String) {\n    createToDo(title:$title) {\n      title\n      id\n    }\n}`; // Subscribe to modified (created) To Dos \n\nconst TODO_SUBSCRIPTION = gql`\nsubscription{\n  ToDoChanged{\n    id\n    title\n  }\n}`;\n\nfunction App() {\n  // The To Dos on the page\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        toDos = _React$useState2[0],\n        setToDos = _React$useState2[1]; // Managing form input - the title of our To Do (controlled component)\n\n\n  const _React$useState3 = React.useState(\"\"),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        inputValue = _React$useState4[0],\n        setInputValue = _React$useState4[1]; // returns a function that we can use to create a to do\n\n\n  const _useMutation = useMutation(TODO_MUTATION),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        addToDoMutation = _useMutation2[0];\n\n  const _useQuery = useQuery(TODO_QUERY),\n        subscribeToMore = _useQuery.subscribeToMore,\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error; // When loading (of To Dos query) changes from true -> false \n  // We set to dos or we throw an error (or )\n  // If loading changes from false -> true\n  // We pass through\n\n\n  React.useEffect(() => {\n    if (error) {\n      console.error(error);\n    }\n\n    if (data) {\n      setToDos(data.toDos);\n    }\n  }, [loading]); // Function expression that calls subscribeToMore (the function returned by ToDos query)\n\n  const subscribeToNewToDos = () => subscribeToMore({\n    document: TODO_SUBSCRIPTION,\n    // the gql subscription operation\n    // How do we update our ToDos data when subscription data comes through.\n    updateQuery: (currentToDos, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data) return currentToDos;\n      const newToDo = subscriptionData.data.ToDoChanged;\n      const updatedToDos = currentToDos.toDos.concat(newToDo);\n      setToDos(updatedToDos); // Update the state of todos with new to do\n\n      return {\n        toDos: updatedToDos\n      }; // return the todos in the format expected\n    }\n  });\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"To Do List Subscription\"), loading ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(ToDoList, {\n    ToDos: toDos //pass in the subscription into component so it can be called \n    ,\n    subscribeToNewToDos: subscribeToNewToDos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: async e => {\n      e.preventDefault(); // When form is submitted, create a new To do and reset form\n\n      await addToDoMutation({\n        variables: {\n          title: inputValue\n        }\n      });\n      setInputValue(\"\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Todo \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Input, {\n    type: \"text\",\n    value: inputValue,\n    onChange: e => setInputValue(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"submit\",\n    value: \"klik disini\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/burhan/public_html/react-graphql/MinimalGQLSubscriptions/client/src/App.js"],"names":["React","gql","useQuery","useMutation","ToDoList","Container","Input","TODO_QUERY","TODO_MUTATION","TODO_SUBSCRIPTION","App","useState","toDos","setToDos","inputValue","setInputValue","addToDoMutation","subscribeToMore","data","loading","error","useEffect","console","subscribeToNewToDos","document","updateQuery","currentToDos","subscriptionData","newToDo","ToDoChanged","updatedToDos","concat","e","preventDefault","variables","title","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation, } from \"@apollo/react-hooks\"\nimport ToDoList from \"./ToDoList\"\nimport { Container, Input } from \"@material-ui/core\"\n\n// Get all To Dos\nconst TODO_QUERY = gql`\nquery{\n\ttoDos{\n    id\n    title\n  }\n}`;\n\n// Create a To do\nconst TODO_MUTATION = gql`\n  mutation CreateToDo($title:String) {\n    createToDo(title:$title) {\n      title\n      id\n    }\n}`;\n\n// Subscribe to modified (created) To Dos \nconst TODO_SUBSCRIPTION = gql`\nsubscription{\n  ToDoChanged{\n    id\n    title\n  }\n}`;\n\nfunction App() {\n  // The To Dos on the page\n  const [toDos, setToDos] = React.useState([]);\n  // Managing form input - the title of our To Do (controlled component)\n  const [inputValue, setInputValue] = React.useState(\"\")\n  // returns a function that we can use to create a to do\n  const [addToDoMutation] = useMutation(TODO_MUTATION);\n\n  const {\n    subscribeToMore, // subscribe to new to dos\n    data, // To do data\n    loading, // true or false if the data is currently loading\n    error // null or error object if failed to fetch\n  } = useQuery(TODO_QUERY)\n\n  // When loading (of To Dos query) changes from true -> false \n  // We set to dos or we throw an error (or )\n  // If loading changes from false -> true\n  // We pass through\n  React.useEffect(() => {\n    if (error) {\n      console.error(error)\n    }\n    if (data) {\n      setToDos(data.toDos)\n    }\n  }, [loading])\n\n  // Function expression that calls subscribeToMore (the function returned by ToDos query)\n  const subscribeToNewToDos = () =>\n    subscribeToMore({\n      document: TODO_SUBSCRIPTION, // the gql subscription operation\n      // How do we update our ToDos data when subscription data comes through.\n      updateQuery: (currentToDos, { subscriptionData }) => {\n        if (!subscriptionData.data) return currentToDos;\n        const newToDo = subscriptionData.data.ToDoChanged;\n        const updatedToDos = currentToDos.toDos.concat(newToDo)\n        setToDos(updatedToDos) // Update the state of todos with new to do\n        return { toDos: updatedToDos } // return the todos in the format expected\n      }\n    })\n\n  return (\n    <Container className=\"App\">\n      <h1>To Do List Subscription</h1>\n      {loading\n        ?\n        <p>Loading...</p>\n        :\n        <ToDoList\n          ToDos={toDos}\n          //pass in the subscription into component so it can be called \n          subscribeToNewToDos={subscribeToNewToDos}\n        />\n      }\n\n      <form onSubmit={async (e) => {\n        e.preventDefault();\n        // When form is submitted, create a new To do and reset form\n        await addToDoMutation({ variables: { title: inputValue } });\n        setInputValue(\"\");\n      }}>\n        <label>\n          Todo <br />\n          <Input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        </label>\n        <Container>\n          <Input type=\"submit\" value=\"klik disini\" />\n        </Container>\n      </form>\n    </Container >\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}